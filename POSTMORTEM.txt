Having all Entities in a giant list is not great. We should have named pointers
to interesting entites (ball, left paddle, right paddle) in addition. They
should be typed appropriately, so we don't need to dynamic-cast down from
Entity every time. Also/alternatively, maybe have lists that contain Entities
of a given type, in addition to the master Entity list? Ex: a Paddle list, a
Wall list.

Problem: components of an Entity store a reference to that Entity as an Entity,
not an appropriate subclass. This leads to, for example: the PaddlePhysics
needs to dynamic-cast its parent to a Paddle before it can get the max speed.
Proposed solution: just don't have a top-level PhysicsComponent class. Maybe
have an interface instead?

Control code is in gamestate.d. This is silly.
Proposed solution:
  * Initialize controllers to null (or some such) when we initialize the
    Entities, then create and attach actual controllers later, in a function
    InitControls in control.d.

Gamestate has too much in it
  * Separate gamestate into two modules. One contains the global definitions
    (including the scores and other structs currently in other files). The
    other contains the functions InitGameState, UpdateGame, and
    CleanupGameState.

Menu code is in main. Put it in another file.

Change "worldgeometry" to just "geometry". It has some screen-geometry-related
stuff in it. Also, move all the geometry code from physics.d to geometry.d. (If
geometry gets too bloated, we can split it up.)

We have magic numbers *everywhere*. We should instead have one or more
parseable config files that specify the sizes, speeds, etc. of all things.

There are a lot of places in the code where we have:
    // FIXME: Do X.
    doX();
We should really remove FIXMEs after we fix them. Uh... and maybe have
occasional reviews where we go over the TODOs and FIXMEs and see if any need to
be fixed urgently or should be removed (either because they're not worth fixing
or because they're already fixed). Also, make sure we all understand what the
comments are proposing.
  * Also, exercise proper TODO/FIXME discipline.
      - Greg proposes not using XXX.
  * Also, put a timelimit on how long we can leave in "TODO: Comment better"
    (which should actually be "FIXME: Comment better").
      - Probably just don't do anything else until you've resolved all of your
        "FIXME: Comment"s.

Proposal: also have code reviews with the goal that every piece of code is
understood by at least 2 developers? (That is, by the one who wrote it and at
least one other.)
  * Probably review regular comments as well...
  * Basicall, we should just cycle through it all, and have people read
    different parts of the code.

We have very little error/exception handling. We should practice that from an
early stage.

We probably don't actually clean up most of our resources.

Let's add bug tracking next time. Also let's use unit tests. And contracts. All
that fun stuff.

Our debug output isn't organized.
    Should have different debug levels.
    Should remove old, no-longer-relevant debug code.
    For debug output that's only useful for a specific reason, hide it behind a
        specific identifier (`debug (Scoring)` or whatever).

From an early stage, get a system set up so we can build HTML documentation.

Problem: Everything is importing everything.
Current proposal: Instead of having the Entity know the types of its Components
but all the Components just store Entities, have the Entity store unspecified
Components and the Components know the type of their Entity. Put the top-level
component classes (actually interfaces?) in an entity_components.d (or some
such). Then each specific component will know what type of Entity it applies
to, but the Entities will just have a SetComponent method or some such, and
some outside code will take care of actually initializing.
  * Note: it's a little annoying that Entity construction now needs outside
    help, instead of just all happening in the constructor.
  * Note: we're still not implementing
        http://gameprogrammingpatterns.com/component.html
    correctly.

